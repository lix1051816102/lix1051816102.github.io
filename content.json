[{"title":"如何在MAC系统下从无到有搭建起自己的个人博客（GITHUB+HEXO）","date":"2019-04-01T16:00:00.000Z","path":"2019/04/02/1-001-20190402/","text":"此篇只针对于Mac系统上个人博客的搭建，有官方文档的都不再进行详细阐述 一、环境准备（Mac、NVM、Homebrew、nodeJS、Git、Hexo）1、首先当然是要有一台装有Mac系统的电脑了，本人Mac系统version为macOS 10.14.4.2、安装nvm(Node Version Manager)，详细安装步骤参考官方文档，在这里不进行详细阐述，下面是我使用的安装命令：1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash 3、使用nvm安装nodeJS，详细安装步骤参考官方文档，下面是我使用的安装命令：1nvm install node # 默认安装最新版本的node 4、我们需要用到一个Mac系统的套件安装神器Homebrew，以方便下面git等套件的管理，详细参考官方文档，下面是我使用的安装命令：1/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 5、接下来我们可以开始安装git了，很简单，使用以下命令安装：1brew install git 6、上面这么多的准备工作，终于步入了正题；下面开始安装Hexo，同样我们可以参考官方文档，下面是我使用的安装命令：1npm install -g hexo-cli 7、在初始化Hexo之前，还需要指定一个安装目录比如Blog，然后执行安装命令：12hexo initnpm install 此时在执行npm install命令时遇到了第一个坑，系统报如下问题：12found 3 vulnerabilities (2 low, 1 moderate)run `npm audit fix` to fix them, or `npm audit` for details 虽然不影响后续的运行，但是对于有点代码强迫症的我来说看着真不舒服。按照给出的建议执行sudo npm audit fix命令后，漏洞并没有修复，这就导致了npm install命令总会提示这段信息：解决方法就是，执行一下npm audit命令可以找到含有漏洞的包，直接定位有问题的模块并修改依赖包的版本即可解决：","raw":"---\ntitle: 如何在MAC系统下从无到有搭建起自己的个人博客（GITHUB+HEXO）\n\ndate: 2019-04-02\n\ntoc: true\n\ncategories: \n- 前端\n\ntags: \n- nodeJS \n- 笔记\n---\n**此篇只针对于Mac系统上个人博客的搭建，有官方文档的都不再进行详细阐述**\n\n## 一、环境准备（Mac、NVM、Homebrew、nodeJS、Git、Hexo）\n1、首先当然是要有一台装有Mac系统的电脑了，本人Mac系统version为macOS 10.14.4.\n2、安装nvm(Node Version Manager)，详细安装步骤参考[官方文档](https://github.com/creationix/nvm/blob/master/README.md)，在这里不进行详细阐述，下面是我使用的安装命令：\n```bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash\n```\n3、使用nvm安装nodeJS，详细安装步骤参考[官方文档](https://github.com/creationix/nvm/blob/master/README.md)，下面是我使用的安装命令：\n```bash\nnvm install node # 默认安装最新版本的node\n```\n4、我们需要用到一个Mac系统的套件安装神器Homebrew，以方便下面git等套件的管理，详细参考[官方文档](https://brew.sh)，下面是我使用的安装命令：\n```bash\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n5、接下来我们可以开始安装git了，很简单，使用以下命令安装：\n```bash\nbrew install git\n```\n6、上面这么多的准备工作，终于步入了正题；下面开始安装Hexo，同样我们可以参考[官方文档](https://hexo.io/docs/)，下面是我使用的安装命令：\n```bash\nnpm install -g hexo-cli\n```\n7、在初始化Hexo之前，还需要指定一个安装目录比如Blog，然后执行安装命令：\n```bash\nhexo init\nnpm install\n```\n\n---\n\n***此时在执行npm install命令时遇到了第一个坑，系统报如下问题：***\n```\nfound 3 vulnerabilities (2 low, 1 moderate)\nrun `npm audit fix` to fix them, or `npm audit` for details\n```\n虽然不影响后续的运行，但是对于有点代码强迫症的我来说看着真不舒服。按照给出的建议执行sudo npm audit fix命令后，漏洞并没有修复，这就导致了npm install命令总会提示这段信息：\n<br>\n![图1](/assets/img/blog/1_001_20190402/01.jpg)\n<br>\n解决方法就是，执行一下npm audit命令可以找到含有漏洞的包，直接定位有问题的模块并修改依赖包的版本即可解决：\n<br>\n![图2](/assets/img/blog/1_001_20190402/02.jpg)\n\n---","content":"<p><strong>此篇只针对于Mac系统上个人博客的搭建，有官方文档的都不再进行详细阐述</strong></p>\n<h2 id=\"一、环境准备（Mac、NVM、Homebrew、nodeJS、Git、Hexo）\"><a href=\"#一、环境准备（Mac、NVM、Homebrew、nodeJS、Git、Hexo）\" class=\"headerlink\" title=\"一、环境准备（Mac、NVM、Homebrew、nodeJS、Git、Hexo）\"></a>一、环境准备（Mac、NVM、Homebrew、nodeJS、Git、Hexo）</h2><p>1、首先当然是要有一台装有Mac系统的电脑了，本人Mac系统version为macOS 10.14.4.<br>2、安装nvm(Node Version Manager)，详细安装步骤参考<a href=\"https://github.com/creationix/nvm/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">官方文档</a>，在这里不进行详细阐述，下面是我使用的安装命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure></p>\n<p>3、使用nvm安装nodeJS，详细安装步骤参考<a href=\"https://github.com/creationix/nvm/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">官方文档</a>，下面是我使用的安装命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install node <span class=\"comment\"># 默认安装最新版本的node</span></span><br></pre></td></tr></table></figure></p>\n<p>4、我们需要用到一个Mac系统的套件安装神器Homebrew，以方便下面git等套件的管理，详细参考<a href=\"https://brew.sh\" target=\"_blank\" rel=\"noopener\">官方文档</a>，下面是我使用的安装命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure></p>\n<p>5、接下来我们可以开始安装git了，很简单，使用以下命令安装：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure></p>\n<p>6、上面这么多的准备工作，终于步入了正题；下面开始安装Hexo，同样我们可以参考<a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">官方文档</a>，下面是我使用的安装命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>7、在初始化Hexo之前，还需要指定一个安装目录比如Blog，然后执行安装命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>此时在执行npm install命令时遇到了第一个坑，系统报如下问题：</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">found 3 vulnerabilities (2 low, 1 moderate)</span><br><span class=\"line\">run `npm audit fix` to fix them, or `npm audit` for details</span><br></pre></td></tr></table></figure></p>\n<p>虽然不影响后续的运行，但是对于有点代码强迫症的我来说看着真不舒服。按照给出的建议执行sudo npm audit fix命令后，漏洞并没有修复，这就导致了npm install命令总会提示这段信息：<br><br><br><img src=\"/assets/img/blog/1_001_20190402/01.jpg\" alt=\"图1\"><br><br><br>解决方法就是，执行一下npm audit命令可以找到含有漏洞的包，直接定位有问题的模块并修改依赖包的版本即可解决：<br><br><br><img src=\"/assets/img/blog/1_001_20190402/02.jpg\" alt=\"图2\"></p>\n<hr>\n","slug":"1-001-20190402","updated":"2019-04-13T13:37:46.899Z","comments":true,"link":"","permalink":"https://lix1051816102.github.io/2019/04/02/1-001-20190402/","excerpt":"","categories":[{"name":"前端","slug":"前端","permalink":"https://lix1051816102.github.io/categories/前端/"}],"tags":[{"name":"nodeJS","slug":"nodeJS","permalink":"https://lix1051816102.github.io/tags/nodeJS/"},{"name":"笔记","slug":"笔记","permalink":"https://lix1051816102.github.io/tags/笔记/"}]}]