[{"title":"如何在MAC系统下从无到有搭建起自己的个人博客（GITHUB+HEXO）","date":"2019-04-01T16:00:00.000Z","path":"2019/04/02/1-001-20190402/","text":"声明：文章含有搬运部分，若有侵权请告知，转载请注明出处！ 此篇只针对于Mac系统上个人博客的搭建，有官方文档的都不再进行详细阐述；主要目的是为了自己能够随时回顾，所以仅供大家参考！ 一、环境准备（Mac、NVM、Homebrew、nodeJS、Git、Hexo）1、首先当然是要有一台装有Mac系统的电脑了，本人Mac系统version为macOS 10.14.4.2、安装nvm(Node Version Manager)，详细安装步骤参考官方文档，在这里不进行详细阐述，下面是我使用的安装命令：1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash 3、使用nvm安装nodeJS，详细安装步骤参考官方文档，下面是我使用的安装命令：1nvm install node # 默认安装最新版本的node 4、我们需要用到一个Mac系统的套件安装神器Homebrew，以方便下面git等套件的管理，详细参考官方文档，下面是我使用的安装命令：1/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 5、接下来我们可以开始安装git了，很简单，使用以下命令安装：1brew install git 6、上面这么多的准备工作，终于步入了正题；下面开始安装Hexo，同样我们可以参考官方文档，下面是我使用的安装命令：1npm install -g hexo-cli 7、在初始化Hexo之前，还需要指定一个安装目录比如Blog，然后执行安装命令：12hexo initnpm install 此时在执行npm install命令时遇到了第一个坑，系统报如下问题：12found 3 vulnerabilities (2 low, 1 moderate)run `npm audit fix` to fix them, or `npm audit` for details 虽然不影响后续的运行，但是对于有点代码强迫症的我来说看着真不舒服。按照给出的建议执行sudo npm audit fix命令后，漏洞并没有修复，这就导致了npm install命令总会提示这段信息：解决方法就是，执行一下npm audit命令可以找到含有漏洞的包，直接定位有问题的模块并修改依赖包的版本即可解决： 8、这里列出几个常用的Hexo命令以及简写方式：12345# hexo n == hexo new 新建posts# hexo g == hexo generate 生成可部署代码# hexo clean 清空生成的可部署代码# hexo s == hexo server 启动本地web服务# hexo d == hexo deploy 代码部署到指定到repository 二、安装主题1、首先从Hexo主题官方网址选择一个中意的主题，搬运请遵守所选主题的LICENSE，不要随意搬运啊！2、选好主题后，我们就可以直接使用git命令clone到自己的博客目录下了；如果想要在搬运来的主题基础上自定义，可以把中意的主题直接fork到自己的GitHub下，然后clone到博客目录下，当然这样就无法直接获取到主题原作者的更新内容了（前提是原作者还在维护这个主题^_^）；至于主题的更新等请参照git的使用方法，例如我搬运的主题：12cd ~Myself/Bloggit clone git@github.com:litten/hexo-theme-yilia.git themes/yilia 3、然后修改Blog目录下的_config.yml文件中的theme属性为yilia，主题通常有也有自己的配置，直接按照主题说明粘贴即可，最终效果如图： 三、部署到GitHub（如何使用GitHub请自行百度）1、首先在自己的GitHub中新建一个空的repository，名称必须为xxx.github.io(xxx填写自己的GitHub账号)；新建过后进入Settings选项卡，向下拉最终看到如下图所示即可：2、Hexo想要通过git部署到GitHub上，需要安装一个git组件：1npm install hexo-deployer-git --save 3、安装完成以后，打开Blog目录下的_config.yml文件，添加或者编辑以下内容：1234deploy: type: git repo: git@github.com:xxx/xxx.github.io.git branch: master 4、接下来就可以使用Hexo命令进行部署了，命令如下：12hexo g # 生成可部署代码hexo d # 代码部署到指定到repository 四、添加评论功能1、网上有很多可用的评论功能，但是GitHub搭建的博客当然使用自家的比较好，这里选择Gitment支持并存储博客的评论；首先注册一个OAuth Application，如何注册参考下图：注册成功后会得到如下图所示的Client ID和Client Secret，后面配置时需要用到这两个值：2、然后需要在GitHub中新建一个空的repository，名称随意，用来存储评论生成的issues；3、接下来我们就可以开始修改主题的_config.yml文件，每一个主题的属性命名各有不同，比如yilia主题的如下：12345gitment_owner: &apos;xxx&apos; #你的 GitHub IDgitment_repo: &apos;hexo-blog-comment&apos; #存储评论的 repogitment_oauth: client_id: &apos;9c6d1dd38b44a3f1cccd&apos; #client ID client_secret: &apos;186f09d7289112612478132849df2b822d509cb0&apos; #client secret 其实对应的代码部分如下所示：123456789101112131415161718&lt;div id=\"gitment-ctn\"&gt;&lt;/div&gt;&lt;!--英文版--&gt;&lt;!--&lt;link rel=\"stylesheet\" href=\"//imsun.github.io/gitment/style/default.css\"&gt;--&gt;&lt;!--&lt;script src=\"//imsun.github.io/gitment/dist/gitment.browser.js\"&gt;&lt;/script&gt;--&gt;&lt;link rel=\"stylesheet\" href=\"https://billts.site/extra_css/gitment.css\"&gt;&lt;script src=\"https://billts.site/js/gitment.js\"&gt;&lt;/script&gt;&lt;script&gt; var gitment = new Gitment(&#123; id: \"&lt;%= page.date %&gt;\", owner: '&lt;%= theme.gitment_owner %&gt;', repo: '&lt;%= theme.gitment_repo %&gt;', oauth: &#123; client_id: '&lt;%= theme.gitment_oauth.client_id %&gt;', client_secret: '&lt;%= theme.gitment_oauth.client_secret %&gt;', &#125;, &#125;) gitment.render('gitment-ctn')&lt;/script&gt; 4、到此为止基本的Gitment配置就完成了，不过唯一不方便的地方就是每一篇博客都需要自己登陆后初始化评论，如下图所示，登陆自己的GitHub账号后初始化即可： 五、添加百度统计1、为了能够监控到博客的访问量等信息，我们可以给博客添加一些分析统计功能，当然相应的工具也很多了，不过目前主要是谷歌和百度使用的比较多，而国内自然也推荐使用百度统计啦！添加百度统计首先需要注册一个百度统计的账号，百度账号不能使用。登录成功后进入管理模块，添加一个自己的网站，如下图所示：2、添加成功后会获取到一段统计代码，把这段代码添加在自己博客的html页面上即可，其中最主要的是hm.src后面的部分： 六、总结经过以上的努力奋战后，终于可以坐下来享受书写博客的乐趣了！当然这也是我职业生涯中的第一篇博客，我尽可能的想做到尽善尽美。所有的知识几乎都是搬来搬去，只有转化为自己的知识才是真正的收获，这就让我产生了学习一下前端的想法。作为一个纯后端的Java工程师，对现在的前端知识只是一知半解，已经无法自定义出来自己喜欢的主题以及界面了，只好借前端大牛的主题先拿来用用，后面再进行自定义了。","raw":"---\ntitle: 如何在MAC系统下从无到有搭建起自己的个人博客（GITHUB+HEXO）\n\ndate: 2019-04-02\n\ntoc: true\n\ncategories: \n- 前端\n\ntags: \n- nodeJS \n- 笔记\n---\n***声明：文章含有搬运部分，若有侵权请告知，转载请注明出处！***\n\n---\n\n**此篇只针对于Mac系统上个人博客的搭建，有官方文档的都不再进行详细阐述；主要目的是为了自己能够随时回顾，所以仅供大家参考！**\n\n## 一、环境准备（Mac、NVM、Homebrew、nodeJS、Git、Hexo）\n1、首先当然是要有一台装有Mac系统的电脑了，本人Mac系统version为macOS 10.14.4.\n2、安装nvm(Node Version Manager)，详细安装步骤参考[官方文档](https://github.com/creationix/nvm/blob/master/README.md)，在这里不进行详细阐述，下面是我使用的安装命令：\n```bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash\n```\n3、使用nvm安装nodeJS，详细安装步骤参考[官方文档](https://github.com/creationix/nvm/blob/master/README.md)，下面是我使用的安装命令：\n```bash\nnvm install node # 默认安装最新版本的node\n```\n4、我们需要用到一个Mac系统的套件安装神器Homebrew，以方便下面git等套件的管理，详细参考[官方文档](https://brew.sh)，下面是我使用的安装命令：\n```bash\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n5、接下来我们可以开始安装git了，很简单，使用以下命令安装：\n```bash\nbrew install git\n```\n6、上面这么多的准备工作，终于步入了正题；下面开始安装Hexo，同样我们可以参考[官方文档](https://hexo.io/docs/)，下面是我使用的安装命令：\n```bash\nnpm install -g hexo-cli\n```\n7、在初始化Hexo之前，还需要指定一个安装目录比如Blog，然后执行安装命令：\n```bash\nhexo init\nnpm install\n```\n\n---\n\n***此时在执行npm install命令时遇到了第一个坑，系统报如下问题：***\n```\nfound 3 vulnerabilities (2 low, 1 moderate)\nrun `npm audit fix` to fix them, or `npm audit` for details\n```\n虽然不影响后续的运行，但是对于有点代码强迫症的我来说看着真不舒服。按照给出的建议执行sudo npm audit fix命令后，漏洞并没有修复，这就导致了npm install命令总会提示这段信息：\n<br>\n![图1](/assets/img/blog/1_001_20190402/01.jpg)\n<br>\n解决方法就是，执行一下npm audit命令可以找到含有漏洞的包，直接定位有问题的模块并修改依赖包的版本即可解决：\n<br>\n![图2](/assets/img/blog/1_001_20190402/02.jpg)\n\n8、这里列出几个常用的Hexo命令以及简写方式：\n```\n# hexo n == hexo new 新建posts\n# hexo g == hexo generate 生成可部署代码\n# hexo clean 清空生成的可部署代码\n# hexo s == hexo server 启动本地web服务\n# hexo d == hexo deploy 代码部署到指定到repository\n```\n\n---\n\n## 二、安装主题\n1、首先从[Hexo主题官方网址](https://hexo.io/themes/)选择一个中意的主题，搬运请遵守所选主题的LICENSE，不要随意搬运啊！\n2、选好主题后，我们就可以直接使用git命令clone到自己的博客目录下了；如果想要在搬运来的主题基础上自定义，可以把中意的主题直接fork到自己的GitHub下，然后clone到博客目录下，当然这样就无法直接获取到主题原作者的更新内容了（前提是原作者还在维护这个主题^_^）；至于主题的更新等请参照git的使用方法，例如我搬运的主题：\n```bash\ncd ~Myself/Blog\ngit clone git@github.com:litten/hexo-theme-yilia.git themes/yilia\n```\n3、然后修改Blog目录下的_config.yml文件中的theme属性为yilia，主题通常有也有自己的配置，直接按照主题说明粘贴即可，最终效果如图：\n<br>\n![图3](/assets/img/blog/1_001_20190402/03.jpg)\n\n---\n\n## 三、部署到GitHub（如何使用GitHub请自行百度）\n1、首先在自己的GitHub中新建一个空的repository，名称必须为xxx.github.io(xxx填写自己的GitHub账号)；新建过后进入Settings选项卡，向下拉最终看到如下图所示即可：\n<br>\n![图4](/assets/img/blog/1_001_20190402/04.jpg)\n2、Hexo想要通过git部署到GitHub上，需要安装一个git组件：\n```bash\nnpm install hexo-deployer-git --save\n```\n3、安装完成以后，打开Blog目录下的_config.yml文件，添加或者编辑以下内容：\n```\ndeploy:\n  type: git\n  repo: git@github.com:xxx/xxx.github.io.git\n  branch: master\n```\n4、接下来就可以使用Hexo命令进行部署了，命令如下：\n```bash\nhexo g # 生成可部署代码\nhexo d # 代码部署到指定到repository\n```\n\n---\n\n## 四、添加评论功能\n1、网上有很多可用的评论功能，但是GitHub搭建的博客当然使用自家的比较好，这里选择Gitment支持并存储博客的评论；\n首先注册一个[OAuth Application](https://github.com/settings/applications/new)，如何注册参考下图：\n<br>\n![图5](/assets/img/blog/1_001_20190402/05.jpg)\n注册成功后会得到如下图所示的Client ID和Client Secret，后面配置时需要用到这两个值：\n<br>\n![图6](/assets/img/blog/1_001_20190402/06.jpg)\n2、然后需要在GitHub中新建一个空的repository，名称随意，用来存储评论生成的issues；\n3、接下来我们就可以开始修改主题的_config.yml文件，每一个主题的属性命名各有不同，比如yilia主题的如下：\n```\ngitment_owner: 'xxx'            #你的 GitHub ID\ngitment_repo: 'hexo-blog-comment'         #存储评论的 repo\ngitment_oauth:\n  client_id: '9c6d1dd38b44a3f1cccd'                             #client ID\n  client_secret: '186f09d7289112612478132849df2b822d509cb0'     #client secret\n```\n其实对应的代码部分如下所示：\n```html\n<div id=\"gitment-ctn\"></div>\n<!--英文版-->\n<!--<link rel=\"stylesheet\" href=\"//imsun.github.io/gitment/style/default.css\">-->\n<!--<script src=\"//imsun.github.io/gitment/dist/gitment.browser.js\"></script>-->\n<link rel=\"stylesheet\" href=\"https://billts.site/extra_css/gitment.css\">\n<script src=\"https://billts.site/js/gitment.js\"></script>\n<script>\n  var gitment = new Gitment({\n    id: \"<%= page.date %>\",\n    owner: '<%= theme.gitment_owner %>',\n    repo: '<%= theme.gitment_repo %>',\n    oauth: {\n      client_id: '<%= theme.gitment_oauth.client_id %>',\n      client_secret: '<%= theme.gitment_oauth.client_secret %>',\n    },\n  })\n  gitment.render('gitment-ctn')\n</script>\n```\n4、到此为止基本的Gitment配置就完成了，不过唯一不方便的地方就是每一篇博客都需要自己登陆后初始化评论，如下图所示，登陆自己的GitHub账号后初始化即可：\n<br>\n![图7](/assets/img/blog/1_001_20190402/07.jpg)\n\n---\n\n## 五、添加百度统计\n1、为了能够监控到博客的访问量等信息，我们可以给博客添加一些分析统计功能，当然相应的工具也很多了，不过目前主要是谷歌和百度使用的比较多，而国内自然也推荐使用百度统计啦！\n添加[百度统计](https://tongji.baidu.com/web/welcome/login)首先需要注册一个百度统计的账号，百度账号不能使用。登录成功后进入管理模块，添加一个自己的网站，如下图所示：\n<br>\n![图8](/assets/img/blog/1_001_20190402/08.jpg)\n2、添加成功后会获取到一段统计代码，把这段代码添加在自己博客的html页面上即可，其中最主要的是hm.src后面的部分：\n<br>\n![图9](/assets/img/blog/1_001_20190402/09.jpg)\n\n---\n\n## 六、总结\n经过以上的努力奋战后，终于可以坐下来享受书写博客的乐趣了！当然这也是我职业生涯中的第一篇博客，我尽可能的想做到尽善尽美。所有的知识几乎都是搬来搬去，只有转化为自己的知识才是真正的收获，这就让我产生了学习一下前端的想法。作为一个纯后端的Java工程师，对现在的前端知识只是一知半解，已经无法自定义出来自己喜欢的主题以及界面了，只好借前端大牛的主题先拿来用用，后面再进行自定义了。","content":"<p><strong><em>声明：文章含有搬运部分，若有侵权请告知，转载请注明出处！</em></strong></p>\n<hr>\n<p><strong>此篇只针对于Mac系统上个人博客的搭建，有官方文档的都不再进行详细阐述；主要目的是为了自己能够随时回顾，所以仅供大家参考！</strong></p>\n<h2 id=\"一、环境准备（Mac、NVM、Homebrew、nodeJS、Git、Hexo）\"><a href=\"#一、环境准备（Mac、NVM、Homebrew、nodeJS、Git、Hexo）\" class=\"headerlink\" title=\"一、环境准备（Mac、NVM、Homebrew、nodeJS、Git、Hexo）\"></a>一、环境准备（Mac、NVM、Homebrew、nodeJS、Git、Hexo）</h2><p>1、首先当然是要有一台装有Mac系统的电脑了，本人Mac系统version为macOS 10.14.4.<br>2、安装nvm(Node Version Manager)，详细安装步骤参考<a href=\"https://github.com/creationix/nvm/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">官方文档</a>，在这里不进行详细阐述，下面是我使用的安装命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure></p>\n<p>3、使用nvm安装nodeJS，详细安装步骤参考<a href=\"https://github.com/creationix/nvm/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">官方文档</a>，下面是我使用的安装命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install node <span class=\"comment\"># 默认安装最新版本的node</span></span><br></pre></td></tr></table></figure></p>\n<p>4、我们需要用到一个Mac系统的套件安装神器Homebrew，以方便下面git等套件的管理，详细参考<a href=\"https://brew.sh\" target=\"_blank\" rel=\"noopener\">官方文档</a>，下面是我使用的安装命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure></p>\n<p>5、接下来我们可以开始安装git了，很简单，使用以下命令安装：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure></p>\n<p>6、上面这么多的准备工作，终于步入了正题；下面开始安装Hexo，同样我们可以参考<a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">官方文档</a>，下面是我使用的安装命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>7、在初始化Hexo之前，还需要指定一个安装目录比如Blog，然后执行安装命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>此时在执行npm install命令时遇到了第一个坑，系统报如下问题：</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">found 3 vulnerabilities (2 low, 1 moderate)</span><br><span class=\"line\">run `npm audit fix` to fix them, or `npm audit` for details</span><br></pre></td></tr></table></figure></p>\n<p>虽然不影响后续的运行，但是对于有点代码强迫症的我来说看着真不舒服。按照给出的建议执行sudo npm audit fix命令后，漏洞并没有修复，这就导致了npm install命令总会提示这段信息：<br><br><br><img src=\"/assets/img/blog/1_001_20190402/01.jpg\" alt=\"图1\"><br><br><br>解决方法就是，执行一下npm audit命令可以找到含有漏洞的包，直接定位有问题的模块并修改依赖包的版本即可解决：<br><br><br><img src=\"/assets/img/blog/1_001_20190402/02.jpg\" alt=\"图2\"></p>\n<p>8、这里列出几个常用的Hexo命令以及简写方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hexo n == hexo new 新建posts</span><br><span class=\"line\"># hexo g == hexo generate 生成可部署代码</span><br><span class=\"line\"># hexo clean 清空生成的可部署代码</span><br><span class=\"line\"># hexo s == hexo server 启动本地web服务</span><br><span class=\"line\"># hexo d == hexo deploy 代码部署到指定到repository</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"二、安装主题\"><a href=\"#二、安装主题\" class=\"headerlink\" title=\"二、安装主题\"></a>二、安装主题</h2><p>1、首先从<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Hexo主题官方网址</a>选择一个中意的主题，搬运请遵守所选主题的LICENSE，不要随意搬运啊！<br>2、选好主题后，我们就可以直接使用git命令clone到自己的博客目录下了；如果想要在搬运来的主题基础上自定义，可以把中意的主题直接fork到自己的GitHub下，然后clone到博客目录下，当然这样就无法直接获取到主题原作者的更新内容了（前提是原作者还在维护这个主题^_^）；至于主题的更新等请参照git的使用方法，例如我搬运的主题：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~Myself/Blog</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure></p>\n<p>3、然后修改Blog目录下的_config.yml文件中的theme属性为yilia，主题通常有也有自己的配置，直接按照主题说明粘贴即可，最终效果如图：<br><br><br><img src=\"/assets/img/blog/1_001_20190402/03.jpg\" alt=\"图3\"></p>\n<hr>\n<h2 id=\"三、部署到GitHub（如何使用GitHub请自行百度）\"><a href=\"#三、部署到GitHub（如何使用GitHub请自行百度）\" class=\"headerlink\" title=\"三、部署到GitHub（如何使用GitHub请自行百度）\"></a>三、部署到GitHub（如何使用GitHub请自行百度）</h2><p>1、首先在自己的GitHub中新建一个空的repository，名称必须为xxx.github.io(xxx填写自己的GitHub账号)；新建过后进入Settings选项卡，向下拉最终看到如下图所示即可：<br><br><br><img src=\"/assets/img/blog/1_001_20190402/04.jpg\" alt=\"图4\"><br>2、Hexo想要通过git部署到GitHub上，需要安装一个git组件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<p>3、安装完成以后，打开Blog目录下的_config.yml文件，添加或者编辑以下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:xxx/xxx.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p>4、接下来就可以使用Hexo命令进行部署了，命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g <span class=\"comment\"># 生成可部署代码</span></span><br><span class=\"line\">hexo d <span class=\"comment\"># 代码部署到指定到repository</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"四、添加评论功能\"><a href=\"#四、添加评论功能\" class=\"headerlink\" title=\"四、添加评论功能\"></a>四、添加评论功能</h2><p>1、网上有很多可用的评论功能，但是GitHub搭建的博客当然使用自家的比较好，这里选择Gitment支持并存储博客的评论；<br>首先注册一个<a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">OAuth Application</a>，如何注册参考下图：<br><br><br><img src=\"/assets/img/blog/1_001_20190402/05.jpg\" alt=\"图5\"><br>注册成功后会得到如下图所示的Client ID和Client Secret，后面配置时需要用到这两个值：<br><br><br><img src=\"/assets/img/blog/1_001_20190402/06.jpg\" alt=\"图6\"><br>2、然后需要在GitHub中新建一个空的repository，名称随意，用来存储评论生成的issues；<br>3、接下来我们就可以开始修改主题的_config.yml文件，每一个主题的属性命名各有不同，比如yilia主题的如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitment_owner: &apos;xxx&apos;            #你的 GitHub ID</span><br><span class=\"line\">gitment_repo: &apos;hexo-blog-comment&apos;         #存储评论的 repo</span><br><span class=\"line\">gitment_oauth:</span><br><span class=\"line\">  client_id: &apos;9c6d1dd38b44a3f1cccd&apos;                             #client ID</span><br><span class=\"line\">  client_secret: &apos;186f09d7289112612478132849df2b822d509cb0&apos;     #client secret</span><br></pre></td></tr></table></figure></p>\n<p>其实对应的代码部分如下所示：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gitment-ctn\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--英文版--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt;link rel=\"stylesheet\" href=\"//imsun.github.io/gitment/style/default.css\"&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt;script src=\"//imsun.github.io/gitment/dist/gitment.browser.js\"&gt;&lt;/script&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://billts.site/extra_css/gitment.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://billts.site/js/gitment.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  var gitment = new Gitment(&#123;</span></span><br><span class=\"line\"><span class=\"xml\">    id: \"<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">page.date</span> %&gt;</span>\",</span></span><br><span class=\"line\"><span class=\"xml\">    owner: '<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">theme.gitment_owner</span> %&gt;</span>',</span></span><br><span class=\"line\"><span class=\"xml\">    repo: '<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">theme.gitment_repo</span> %&gt;</span>',</span></span><br><span class=\"line\"><span class=\"undefined\">    oauth: &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      client_id: '<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">theme.gitment_oauth.client_id</span> %&gt;</span>',</span></span><br><span class=\"line\"><span class=\"xml\">      client_secret: '<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">theme.gitment_oauth.client_secret</span> %&gt;</span>',</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">  gitment.render('gitment-ctn')</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>4、到此为止基本的Gitment配置就完成了，不过唯一不方便的地方就是每一篇博客都需要自己登陆后初始化评论，如下图所示，登陆自己的GitHub账号后初始化即可：<br><br><br><img src=\"/assets/img/blog/1_001_20190402/07.jpg\" alt=\"图7\"></p>\n<hr>\n<h2 id=\"五、添加百度统计\"><a href=\"#五、添加百度统计\" class=\"headerlink\" title=\"五、添加百度统计\"></a>五、添加百度统计</h2><p>1、为了能够监控到博客的访问量等信息，我们可以给博客添加一些分析统计功能，当然相应的工具也很多了，不过目前主要是谷歌和百度使用的比较多，而国内自然也推荐使用百度统计啦！<br>添加<a href=\"https://tongji.baidu.com/web/welcome/login\" target=\"_blank\" rel=\"noopener\">百度统计</a>首先需要注册一个百度统计的账号，百度账号不能使用。登录成功后进入管理模块，添加一个自己的网站，如下图所示：<br><br><br><img src=\"/assets/img/blog/1_001_20190402/08.jpg\" alt=\"图8\"><br>2、添加成功后会获取到一段统计代码，把这段代码添加在自己博客的html页面上即可，其中最主要的是hm.src后面的部分：<br><br><br><img src=\"/assets/img/blog/1_001_20190402/09.jpg\" alt=\"图9\"></p>\n<hr>\n<h2 id=\"六、总结\"><a href=\"#六、总结\" class=\"headerlink\" title=\"六、总结\"></a>六、总结</h2><p>经过以上的努力奋战后，终于可以坐下来享受书写博客的乐趣了！当然这也是我职业生涯中的第一篇博客，我尽可能的想做到尽善尽美。所有的知识几乎都是搬来搬去，只有转化为自己的知识才是真正的收获，这就让我产生了学习一下前端的想法。作为一个纯后端的Java工程师，对现在的前端知识只是一知半解，已经无法自定义出来自己喜欢的主题以及界面了，只好借前端大牛的主题先拿来用用，后面再进行自定义了。</p>\n","slug":"1-001-20190402","updated":"2019-06-30T09:51:01.106Z","comments":true,"link":"","permalink":"https://lix1051816102.github.io/2019/04/02/1-001-20190402/","excerpt":"","categories":[{"name":"前端","slug":"前端","permalink":"https://lix1051816102.github.io/categories/前端/"}],"tags":[{"name":"nodeJS","slug":"nodeJS","permalink":"https://lix1051816102.github.io/tags/nodeJS/"},{"name":"笔记","slug":"笔记","permalink":"https://lix1051816102.github.io/tags/笔记/"}]}]